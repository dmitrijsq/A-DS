#НАИВНЫЙ АЛГОРИТМ
def fibonachi():
    a = [0,1,1]
    while len(a) != 500:
        a.append(a[-1]+a[-2])
    stroka = ''
    for i in range(len(a)):
        stroka += str(a[i])
    return stroka


a = fibonachi()
def naive(a):
    k = 0
    maxx = []
    for j in range(10,100):
        for i in range(len(a)-1):
            if str(j) == a[i]+a[i+1]:
                k += 1
        else:
            maxx.append(k)
            k = 0
    return max(maxx), maxx.index(max(maxx))+10
print(naive(a))

#АЛГОРИТМ БОЙЕРА-МУРА
def fibonachi():
    a = [0,1,1]
    while len(a) != 500:
        a.append(a[-1]+a[-2])
    stroka = ''
    for i in range(len(a)):
        stroka += str(a[i])
    return stroka

stroka = fibonachi()

shablon = '71'
def finder_boira_muera(string, shablon):
    def if_find(shablon, shablon_strok):
        for i in range(len(shablon)-1, -1, -1):
            if shablon[i] != shablon_strok[i]:
                return False
        return True

    step = len(shablon)
    count = 0
    while step <= len(string):
        if if_find(shablon, string[step-len(shablon):step:]):
            count += 1
            step += 1
        else:
            new_step = 0
            for i in range(len(shablon)-2, -1, -1):
                if string[step - 1] == shablon[i]:
                    new_step = (len(shablon) - i) - 1
                    break
                else:
                    new_step += 1
            step += new_step
            if len(shablon) == 1:
                step += 1
    return count

print(finder_boira_muera(stroka,shablon))

#АЛГОРИТМ РАБИНА-КАРПА
def fibonachi():
    a = [0,1,1]
    while len(a) != 500:
        a.append(a[-1]+a[-2])
    stroka = ''
    for i in range(len(a)):
        stroka += str(a[i])
    return stroka

stroka = fibonachi()

def hash1(a):
    m = 1
    alphabet = 10
    #0 - 0, 1 - 1 и т.д
    a = str(a)
    h = int(a[0])*10**1+int(a[1]*10**0)
    return h

def rabin_karp(a):
    k = 0
    maxx = []
    for j in range(10,100):
        for i in range(len(a)-1):
            if hash1(j) == hash1(a[i]+a[i+1]):
                k += 1
        else:
            maxx.append(k)
            k = 0
    return max(maxx), maxx.index(max(maxx))+10

print(rabin_karp(stroka))



#АЛГОРИТМ КНУТА-МОРРИСА-ПРАТТА
#!/usr/bin/env python
# coding: utf-8

# In[28]:
def fibonachi():
    a = [0,1,1]
    while len(a) != 500:
        a.append(a[-1]+a[-2])
    stroka = ''
    for i in range(len(a)):
        stroka += str(a[i])
    return stroka

stroka = fibonachi()

# Python program for KMP Algorithm
def KMPSearch(pat, txt):
    M = len(pat)
    N = len(txt)
    k = 0
    # create lps[] that will hold the longest prefix suffix
    # values for pattern
    lps = [0]*M
    j = 0 # index for pat[]

    # Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, M, lps)

    i = 0 # index for txt[]
    while i < N:
        if pat[j] == txt[i]:
            i += 1
            j += 1

        if j == M:
            k += 1
            j = lps[j-1]

        # mismatch after j matches
        elif i < N and pat[j] != txt[i]:
            # Do not match lps[0..lps[j-1]] characters,
            # they will match anyway
            if j != 0:
                j = lps[j-1]
            else:
                i += 1
    print(k)
def computeLPSArray(pat, M, lps):
    len = 0 # length of the previous longest prefix suffix

    lps[0] # lps[0] is always 0
    i = 1

    # the loop calculates lps[i] for i = 1 to M-1
    while i < M:
        if pat[i]== pat[len]:
            len += 1
            lps[i] = len
            i += 1
        else:
            # This is tricky. Consider the example.
            # AAACAAAA and i = 7. The idea is similar
            # to search step.
            if len != 0:
                len = lps[len-1]

                # Also, note that we do not increment i here
            else:
                lps[i] = 0
                i += 1

pat = "71"
KMPSearch(pat, stroka)



#ПЛАГИАТ
import wikipedia
import docx

def naive(text, summary):
    checked = []
    for i in range(2, len(summary)):
        stroka = summary[i-2] + summary[i-1] + summary[i]
        if not(stroka in checked) and stroka in text:
            checked.append(stroka)
    return checked


def remover(text):
    symbols = ['.', ',', ':', '\n', '-', ')', '1', '2',
                    '3', '4', '5', '6', '7', '8', '9', '0',
                    ';', '(', '-', '«', '»', '—', '?', '=', '==',
                    '  ', '–']
    for i in symbols:
        if i == "  ":
            text = text.replace(i, ' ')
        elif i == "\n":
            text = text.replace(i, "\n")
        else:
            text = text.replace(i, ' ')
    return text

def text_get(file_name):
    f = docx.Document(file_name)
    text = ""
    for i in f.paragraphs:
        text += i.text
    return text

wikipedia.set_lang("ru")
text = remover(wikipedia.page("Логика").content).split()
summary = remover(text_get("Логика.docx"))
summary_len = len(summary)
summary = summary.split()

text_triple = [text[i-2]+text[i-1]+text[i] for i in range(2, len(text))]

pl_len = len("".join(naive(text_triple, summary)))

print("В реферате присутствует примерно %.4f" % ((pl_len/summary_len)*100), "% плагиата", sep="")
